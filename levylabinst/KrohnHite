import json
import warnings
from functools import partial
from typing import Any, Optional, Dict, Union
import zmq
from .ZMQInstrument import ZMQInstrument
import qcodes.validators as vals

class KrohnHite(ZMQInstrument):
    """
    Class to represent the Krohn-Hite amplifier in the LevyLab Instrument Framework.
    This driver talks to the amplifier via ZMQ.

    Args:
        name: The name used internally by QCoDeS for this driver
        address: The ZMQ server address.
        config: A dictionary of the channel configuration parameters for the amplifier
    """

    def __init__(self, name: str, address: str, config: dict, **kwargs: Any) -> None:
        super().__init__(name=name, address=address, **kwargs)
        self.address = address
        self.config = config

        self.connect_message()
        
        for label, value in self.config['kh_config_info'].items():
            self.add_parameter(f'{label}_gain',
                               label=f'{label} Gain',
                               unit='dB',
                               vals=vals.Enum(1, 10, 100, 1000),
                               get_cmd=self._dump,
                               set_cmd=partial(self._set_gain, value))

            self.add_parameter(f'{label}_input',
                               label=f'{label} Input Mode',
                               vals=vals.Enum('OFF', 'SE+', 'SE-', 'DIFF'),
                               get_cmd=self._dump,
                               set_cmd=partial(self._set_input, value))

            self.add_parameter(f'{label}_shunt',
                               label=f'{label} Shunt',
                               unit='Ohms',
                               vals=vals.Enum(0, 50, 500, 5000, 50000, 10000000),
                               get_cmd=self._dump,
                               set_cmd=partial(self._set_shunt, value))

            self.add_parameter(f'{label}_couple',
                               label=f'{label} Coupling',
                               vals=vals.Enum('AC', 'DC'),
                               get_cmd=self._dump,
                               set_cmd=partial(self._set_coupling, value))

            self.add_parameter(f'{label}_filter',
                               label=f'{label} Filter',
                               vals=vals.Enum('OFF', 'ON'),
                               get_cmd=self._dump,
                               set_cmd=partial(self._set_filter, value))
            
    def reload_config(self, new_config):
        """
        Reload the configuration and update channels.
        """
        try:
            existing_channels = set(self.config['kh_config_info'].keys())
            new_channels = set(new_config['kh_config_info'].keys())

            for channel in existing_channels - new_channels:
                del self.parameters[f'{channel}_gain']
                del self.parameters[f'{channel}_input']
                del self.parameters[f'{channel}_shunt']
                del self.parameters[f'{channel}_couple']
                del self.parameters[f'{channel}_filter']

            for channel in new_channels & existing_channels:
                del self.parameters[f'{channel}_gain']
                del self.parameters[f'{channel}_input']
                del self.parameters[f'{channel}_shunt']
                del self.parameters[f'{channel}_couple']
                del self.parameters[f'{channel}_filter']

            self.config['kh_config_info'] = new_config['kh_config_info']

            # Reinitialize parameters
            for label, value in self.config['kh_config_info'].items():
                self.add_parameter(f'{label}_gain',
                                   label=f'{label} Gain',
                                   unit='dB',
                                   vals=vals.Enum(1, 10, 100, 1000),
                                   get_cmd=self._dump,
                                   set_cmd=partial(self._set_gain, value))

                self.add_parameter(f'{label}_input',
                                   label=f'{label} Input Mode',
                                   vals=vals.Enum('OFF', 'SE+', 'SE-', 'DIFF'),
                                   get_cmd=self._dump,
                                   set_cmd=partial(self._set_input, value))

                self.add_parameter(f'{label}_shunt',
                                   label=f'{label} Shunt',
                                   unit='Ohms',
                                   vals=vals.Enum(0, 50, 500, 5000, 50000, 10000000),
                                   get_cmd=self._dump,
                                   set_cmd=partial(self._set_shunt, value))

                self.add_parameter(f'{label}_couple',
                                   label=f'{label} Coupling',
                                   vals=vals.Enum('AC', 'DC'),
                                   get_cmd=self._dump,
                                   set_cmd=partial(self._set_coupling, value))

                self.add_parameter(f'{label}_filter',
                                   label=f'{label} Filter',
                                   vals=vals.Enum('OFF', 'ON'),
                                   get_cmd=self._dump,
                                   set_cmd=partial(self._set_filter, value))

            print("Config reloaded successfully.")
        except Exception as e:
            print(f"Failed to reload configuration: {e}")

    def reset_parameters(self) -> None:
        """
        Reset defined channel parameters to default values:
        Gain = 1, Input = 'OFF', Shunt = 0, Couple = 'DC', Filter = 'OFF'.
        """
        default_values = {
            'gain': 1,
            'input': 'OFF',
            'shunt': 0,
            'couple': 'DC',
            'filter': 'OFF'
        }

        for label, value in self.config['lockin_config_info'].items():
            self.set(f'{label}_gain', default_values['gain'])
            self.set(f'{label}_input', default_values['input'])
            self.set(f'{label}_shunt', default_values['shunt'])
            self.set(f'{label}_couple', default_values['couple'])
            self.set(f'{label}_filter', default_values['filter'])

        print("Krohn-Hite parameters have been reset to default values.")

    def get_idn(self) -> dict[str, Optional[str]]:
        idn_info = super().get_idn()  # Reuse the parent method
        idn_info["model"] = "Krohn-Hite"  # Override the model field
        return idn_info
    
    def connect_message(self) -> None:
        """
        Print a connection message for the amplifier.
        """
        print(f"Connected to Krohn-Hite amplifier at address {self.address}.")
        print(f"Configuration file loaded: {self.config}")

    # Placeholder functions for setting commands to the instrument
    def _dump(self):
        pass

    def _set_gain(self, channel: int, value: float) -> None:
        param = {'channel': channel, 'gain': value}
        self._send_command('setChannelGain', param)

    def _set_input(self, channel: int, value: str) -> None:
        param = {'channel': channel, 'input': value}
        self._send_command('setChannelInput', param)

    def _set_shunt(self, channel: int, value: float) -> None:
        param = {'channel': channel, 'shunt': value}
        self._send_command('setChannelShunt', param)

    def _set_coupling(self, channel: int, value: str) -> None:
        param = {'channel': channel, 'couple': value}
        self._send_command('setChannelCoupling', param)

    def _set_filter(self, channel: int, value: str) -> None:
        param = {'channel': channel, 'filter': value}
        self._send_command('setChannelFilter', param)
